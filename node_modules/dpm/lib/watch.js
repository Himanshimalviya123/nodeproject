var fs = require('fs');
var next = require('next.js');
var path = require('path');
var wrench = require('wrench');

var T = require('./t');

var isHidden = function(file) {
    return /(?:^|\/)\.\w+/.test(file);
};

var recursiveWatch = function(dirs, options, callback) {

    var FILE_LAST_MODIFIED_TIME = {};

    var t = T(callback);

    if (!Array.isArray(dirs)) {
        dirs = [dirs];
    }

    if (!callback) {
        callback = options;
        options = {};
    }

    var check = function(f) {
        fs.stat(f, t(function(stat) {
            var isNew = !FILE_LAST_MODIFIED_TIME[f];

            if (isNew || stat.mtime > FILE_LAST_MODIFIED_TIME[f]) {
                FILE_LAST_MODIFIED_TIME[f] = stat.mtime;                     
                callback(null, f, isNew);
            }
        }));   
    };

    var watch = function(dirs) {
        dirs.forEach(function(file) {
            if (isHidden(file)) {
                return;
            }
            fs.lstat(file, t(function(stats) { 
                if (stats.isDirectory()) {
                    fs.watch(file, function(event, f) {
                        if (f) {
                            check(path.resolve(file, f));  
                        }                    
                    });
                    fs.readdir(file, t(function(files) {                    
                        watch(files.map(function(f) {
                            return path.join(file, f);
                        }));
                    }));
                }
            }));
        });
    };

    if (options.init) {
        dirs.forEach(function(dir) {
            wrench.readdirRecursive(dir, t(function(files) {
                if (files) {
                    files.forEach(function(f) {
                        check(path.resolve(dir, f));
                    });
                }        
            }));
        });        
    }

    watch(dirs);
};

module.exports = recursiveWatch;




